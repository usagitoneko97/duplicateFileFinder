# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fileDuplication')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fileDuplication')
    _fileDuplication = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fileDuplication', [dirname(__file__)])
        except ImportError:
            import _fileDuplication
            return _fileDuplication
        try:
            _mod = imp.load_module('_fileDuplication', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fileDuplication = swig_import_helper()
    del swig_import_helper
else:
    import _fileDuplication
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class _Item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _fileDuplication._Item_next_set
    __swig_getmethods__["next"] = _fileDuplication._Item_next_get
    if _newclass:
        next = _swig_property(_fileDuplication._Item_next_get, _fileDuplication._Item_next_set)
    __swig_setmethods__["data"] = _fileDuplication._Item_data_set
    __swig_getmethods__["data"] = _fileDuplication._Item_data_get
    if _newclass:
        data = _swig_property(_fileDuplication._Item_data_get, _fileDuplication._Item_data_set)

    def __init__(self):
        this = _fileDuplication.new__Item()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete__Item
    __del__ = lambda self: None
_Item_swigregister = _fileDuplication._Item_swigregister
_Item_swigregister(_Item)

class _LinkedList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _LinkedList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _LinkedList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["head"] = _fileDuplication._LinkedList_head_set
    __swig_getmethods__["head"] = _fileDuplication._LinkedList_head_get
    if _newclass:
        head = _swig_property(_fileDuplication._LinkedList_head_get, _fileDuplication._LinkedList_head_set)
    __swig_setmethods__["tail"] = _fileDuplication._LinkedList_tail_set
    __swig_getmethods__["tail"] = _fileDuplication._LinkedList_tail_get
    if _newclass:
        tail = _swig_property(_fileDuplication._LinkedList_tail_get, _fileDuplication._LinkedList_tail_set)
    __swig_setmethods__["len"] = _fileDuplication._LinkedList_len_set
    __swig_getmethods__["len"] = _fileDuplication._LinkedList_len_get
    if _newclass:
        len = _swig_property(_fileDuplication._LinkedList_len_get, _fileDuplication._LinkedList_len_set)

    def __init__(self):
        this = _fileDuplication.new__LinkedList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete__LinkedList
    __del__ = lambda self: None
_LinkedList_swigregister = _fileDuplication._LinkedList_swigregister
_LinkedList_swigregister(_LinkedList)

class _DuplicationList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DuplicationList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DuplicationList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numberOfDuplication"] = _fileDuplication._DuplicationList_numberOfDuplication_set
    __swig_getmethods__["numberOfDuplication"] = _fileDuplication._DuplicationList_numberOfDuplication_get
    if _newclass:
        numberOfDuplication = _swig_property(_fileDuplication._DuplicationList_numberOfDuplication_get, _fileDuplication._DuplicationList_numberOfDuplication_set)
    __swig_setmethods__["list"] = _fileDuplication._DuplicationList_list_set
    __swig_getmethods__["list"] = _fileDuplication._DuplicationList_list_get
    if _newclass:
        list = _swig_property(_fileDuplication._DuplicationList_list_get, _fileDuplication._DuplicationList_list_set)

    def __init__(self):
        this = _fileDuplication.new__DuplicationList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete__DuplicationList
    __del__ = lambda self: None
_DuplicationList_swigregister = _fileDuplication._DuplicationList_swigregister
_DuplicationList_swigregister(_DuplicationList)


def findDuplicate(path):
    return _fileDuplication.findDuplicate(path)
findDuplicate = _fileDuplication.findDuplicate

def listAllDuplication(dl):
    return _fileDuplication.listAllDuplication(dl)
listAllDuplication = _fileDuplication.listAllDuplication

def removeAllFileProperty(path):
    return _fileDuplication.removeAllFileProperty(path)
removeAllFileProperty = _fileDuplication.removeAllFileProperty

def testSwig(path):
    return _fileDuplication.testSwig(path)
testSwig = _fileDuplication.testSwig
class Student(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Student, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Student, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _fileDuplication.Student_name_set
    __swig_getmethods__["name"] = _fileDuplication.Student_name_get
    if _newclass:
        name = _swig_property(_fileDuplication.Student_name_get, _fileDuplication.Student_name_set)
    __swig_setmethods__["age"] = _fileDuplication.Student_age_set
    __swig_getmethods__["age"] = _fileDuplication.Student_age_get
    if _newclass:
        age = _swig_property(_fileDuplication.Student_age_get, _fileDuplication.Student_age_set)
    __swig_setmethods__["weight"] = _fileDuplication.Student_weight_set
    __swig_getmethods__["weight"] = _fileDuplication.Student_weight_get
    if _newclass:
        weight = _swig_property(_fileDuplication.Student_weight_get, _fileDuplication.Student_weight_set)
    __swig_setmethods__["height"] = _fileDuplication.Student_height_set
    __swig_getmethods__["height"] = _fileDuplication.Student_height_get
    if _newclass:
        height = _swig_property(_fileDuplication.Student_height_get, _fileDuplication.Student_height_set)

    def __init__(self):
        this = _fileDuplication.new_Student()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete_Student
    __del__ = lambda self: None
Student_swigregister = _fileDuplication.Student_swigregister
Student_swigregister(Student)

class Item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _fileDuplication.Item_next_set
    __swig_getmethods__["next"] = _fileDuplication.Item_next_get
    if _newclass:
        next = _swig_property(_fileDuplication.Item_next_get, _fileDuplication.Item_next_set)
    __swig_setmethods__["data"] = _fileDuplication.Item_data_set
    __swig_getmethods__["data"] = _fileDuplication.Item_data_get
    if _newclass:
        data = _swig_property(_fileDuplication.Item_data_get, _fileDuplication.Item_data_set)

    def __init__(self):
        this = _fileDuplication.new_Item()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete_Item
    __del__ = lambda self: None
Item_swigregister = _fileDuplication.Item_swigregister
Item_swigregister(Item)

class LinkedList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkedList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinkedList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["head"] = _fileDuplication.LinkedList_head_set
    __swig_getmethods__["head"] = _fileDuplication.LinkedList_head_get
    if _newclass:
        head = _swig_property(_fileDuplication.LinkedList_head_get, _fileDuplication.LinkedList_head_set)
    __swig_setmethods__["tail"] = _fileDuplication.LinkedList_tail_set
    __swig_getmethods__["tail"] = _fileDuplication.LinkedList_tail_get
    if _newclass:
        tail = _swig_property(_fileDuplication.LinkedList_tail_get, _fileDuplication.LinkedList_tail_set)
    __swig_setmethods__["len"] = _fileDuplication.LinkedList_len_set
    __swig_getmethods__["len"] = _fileDuplication.LinkedList_len_get
    if _newclass:
        len = _swig_property(_fileDuplication.LinkedList_len_get, _fileDuplication.LinkedList_len_set)

    def __init__(self):
        this = _fileDuplication.new_LinkedList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete_LinkedList
    __del__ = lambda self: None
LinkedList_swigregister = _fileDuplication.LinkedList_swigregister
LinkedList_swigregister(LinkedList)


def ListInit(list):
    return _fileDuplication.ListInit(list)
ListInit = _fileDuplication.ListInit

def ListAddEmptyLinkedList(list, item):
    return _fileDuplication.ListAddEmptyLinkedList(list, item)
ListAddEmptyLinkedList = _fileDuplication.ListAddEmptyLinkedList

def ListAddLinkedList(list, item):
    return _fileDuplication.ListAddLinkedList(list, item)
ListAddLinkedList = _fileDuplication.ListAddLinkedList

def ListRemoveFirst(list):
    return _fileDuplication.ListRemoveFirst(list)
ListRemoveFirst = _fileDuplication.ListRemoveFirst

def ListRemoveLinkedListByName(name, list):
    return _fileDuplication.ListRemoveLinkedListByName(name, list)
ListRemoveLinkedListByName = _fileDuplication.ListRemoveLinkedListByName
JSON_FILE_NAME = _fileDuplication.JSON_FILE_NAME
class FileObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dr"] = _fileDuplication.FileObj_dr_set
    __swig_getmethods__["dr"] = _fileDuplication.FileObj_dr_get
    if _newclass:
        dr = _swig_property(_fileDuplication.FileObj_dr_get, _fileDuplication.FileObj_dr_set)
    __swig_setmethods__["path"] = _fileDuplication.FileObj_path_set
    __swig_getmethods__["path"] = _fileDuplication.FileObj_path_get
    if _newclass:
        path = _swig_property(_fileDuplication.FileObj_path_get, _fileDuplication.FileObj_path_set)

    def __init__(self):
        this = _fileDuplication.new_FileObj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete_FileObj
    __del__ = lambda self: None
FileObj_swigregister = _fileDuplication.FileObj_swigregister
FileObj_swigregister(FileObj)

class Date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr
    __swig_setmethods__["year"] = _fileDuplication.Date_year_set
    __swig_getmethods__["year"] = _fileDuplication.Date_year_get
    if _newclass:
        year = _swig_property(_fileDuplication.Date_year_get, _fileDuplication.Date_year_set)
    __swig_setmethods__["month"] = _fileDuplication.Date_month_set
    __swig_getmethods__["month"] = _fileDuplication.Date_month_get
    if _newclass:
        month = _swig_property(_fileDuplication.Date_month_get, _fileDuplication.Date_month_set)
    __swig_setmethods__["day"] = _fileDuplication.Date_day_set
    __swig_getmethods__["day"] = _fileDuplication.Date_day_get
    if _newclass:
        day = _swig_property(_fileDuplication.Date_day_get, _fileDuplication.Date_day_set)
    __swig_setmethods__["hour"] = _fileDuplication.Date_hour_set
    __swig_getmethods__["hour"] = _fileDuplication.Date_hour_get
    if _newclass:
        hour = _swig_property(_fileDuplication.Date_hour_get, _fileDuplication.Date_hour_set)
    __swig_setmethods__["minute"] = _fileDuplication.Date_minute_set
    __swig_getmethods__["minute"] = _fileDuplication.Date_minute_get
    if _newclass:
        minute = _swig_property(_fileDuplication.Date_minute_get, _fileDuplication.Date_minute_set)
    __swig_setmethods__["seconds"] = _fileDuplication.Date_seconds_set
    __swig_getmethods__["seconds"] = _fileDuplication.Date_seconds_get
    if _newclass:
        seconds = _swig_property(_fileDuplication.Date_seconds_get, _fileDuplication.Date_seconds_set)

    def __init__(self):
        this = _fileDuplication.new_Date()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete_Date
    __del__ = lambda self: None
Date_swigregister = _fileDuplication.Date_swigregister
Date_swigregister(Date)

class FileProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileProperty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _fileDuplication.FileProperty_name_set
    __swig_getmethods__["name"] = _fileDuplication.FileProperty_name_get
    if _newclass:
        name = _swig_property(_fileDuplication.FileProperty_name_get, _fileDuplication.FileProperty_name_set)
    __swig_setmethods__["size"] = _fileDuplication.FileProperty_size_set
    __swig_getmethods__["size"] = _fileDuplication.FileProperty_size_get
    if _newclass:
        size = _swig_property(_fileDuplication.FileProperty_size_get, _fileDuplication.FileProperty_size_set)
    __swig_setmethods__["crc"] = _fileDuplication.FileProperty_crc_set
    __swig_getmethods__["crc"] = _fileDuplication.FileProperty_crc_get
    if _newclass:
        crc = _swig_property(_fileDuplication.FileProperty_crc_get, _fileDuplication.FileProperty_crc_set)
    __swig_setmethods__["dateModified"] = _fileDuplication.FileProperty_dateModified_set
    __swig_getmethods__["dateModified"] = _fileDuplication.FileProperty_dateModified_get
    if _newclass:
        dateModified = _swig_property(_fileDuplication.FileProperty_dateModified_get, _fileDuplication.FileProperty_dateModified_set)
    __swig_setmethods__["path"] = _fileDuplication.FileProperty_path_set
    __swig_getmethods__["path"] = _fileDuplication.FileProperty_path_get
    if _newclass:
        path = _swig_property(_fileDuplication.FileProperty_path_get, _fileDuplication.FileProperty_path_set)

    def __init__(self):
        this = _fileDuplication.new_FileProperty()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete_FileProperty
    __del__ = lambda self: None
FileProperty_swigregister = _fileDuplication.FileProperty_swigregister
FileProperty_swigregister(FileProperty)

class FolderContent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FolderContent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FolderContent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _fileDuplication.FolderContent_name_set
    __swig_getmethods__["name"] = _fileDuplication.FolderContent_name_get
    if _newclass:
        name = _swig_property(_fileDuplication.FolderContent_name_get, _fileDuplication.FolderContent_name_set)

    def __init__(self):
        this = _fileDuplication.new_FolderContent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fileDuplication.delete_FolderContent
    __del__ = lambda self: None
FolderContent_swigregister = _fileDuplication.FolderContent_swigregister
FolderContent_swigregister(FolderContent)


def updateFileInfo():
    return _fileDuplication.updateFileInfo()
updateFileInfo = _fileDuplication.updateFileInfo

def _updateFileInfo(dr, path):
    return _fileDuplication._updateFileInfo(dr, path)
_updateFileInfo = _fileDuplication._updateFileInfo

def isRegularFile(path):
    return _fileDuplication.isRegularFile(path)
isRegularFile = _fileDuplication.isRegularFile

def getNextFile(fileObj):
    return _fileDuplication.getNextFile(fileObj)
getNextFile = _fileDuplication.getNextFile

def getnextFileIgnoreProperty(fileObj):
    return _fileDuplication.getnextFileIgnoreProperty(fileObj)
getnextFileIgnoreProperty = _fileDuplication.getnextFileIgnoreProperty

def getNextFolder(fileObj):
    return _fileDuplication.getNextFolder(fileObj)
getNextFolder = _fileDuplication.getNextFolder

def removeDir(path):
    return _fileDuplication.removeDir(path)
removeDir = _fileDuplication.removeDir

def _removeDir(dr, path):
    return _fileDuplication._removeDir(dr, path)
_removeDir = _fileDuplication._removeDir

def getSize(path):
    return _fileDuplication.getSize(path)
getSize = _fileDuplication.getSize

def readContentOfGivenPath(path):
    return _fileDuplication.readContentOfGivenPath(path)
readContentOfGivenPath = _fileDuplication.readContentOfGivenPath

def loadFileObjWithPath(workingDir, fileObj):
    return _fileDuplication.loadFileObjWithPath(workingDir, fileObj)
loadFileObjWithPath = _fileDuplication.loadFileObjWithPath

def getFileModifiedDate(path):
    return _fileDuplication.getFileModifiedDate(path)
getFileModifiedDate = _fileDuplication.getFileModifiedDate

def removeFileProperty(path):
    return _fileDuplication.removeFileProperty(path)
removeFileProperty = _fileDuplication.removeFileProperty
# This file is compatible with both classic and new-style classes.


